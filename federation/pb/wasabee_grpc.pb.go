// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: pb/wasabee.proto

package federation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WasabeeFederationClient is the client API for WasabeeFederation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WasabeeFederationClient interface {
	SetCommunityID(ctx context.Context, in *CommunityID, opts ...grpc.CallOption) (*Error, error)
	SetAgentLocation(ctx context.Context, in *AgentLocation, opts ...grpc.CallOption) (*Error, error)
	SetIntelData(ctx context.Context, in *IntelData, opts ...grpc.CallOption) (*Error, error)
	AddFirebaseToken(ctx context.Context, in *FBData, opts ...grpc.CallOption) (*Error, error)
}

type wasabeeFederationClient struct {
	cc grpc.ClientConnInterface
}

func NewWasabeeFederationClient(cc grpc.ClientConnInterface) WasabeeFederationClient {
	return &wasabeeFederationClient{cc}
}

func (c *wasabeeFederationClient) SetCommunityID(ctx context.Context, in *CommunityID, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/wasabee.WasabeeFederation/SetCommunityID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wasabeeFederationClient) SetAgentLocation(ctx context.Context, in *AgentLocation, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/wasabee.WasabeeFederation/SetAgentLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wasabeeFederationClient) SetIntelData(ctx context.Context, in *IntelData, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/wasabee.WasabeeFederation/SetIntelData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wasabeeFederationClient) AddFirebaseToken(ctx context.Context, in *FBData, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/wasabee.WasabeeFederation/AddFirebaseToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WasabeeFederationServer is the server API for WasabeeFederation service.
// All implementations must embed UnimplementedWasabeeFederationServer
// for forward compatibility
type WasabeeFederationServer interface {
	SetCommunityID(context.Context, *CommunityID) (*Error, error)
	SetAgentLocation(context.Context, *AgentLocation) (*Error, error)
	SetIntelData(context.Context, *IntelData) (*Error, error)
	AddFirebaseToken(context.Context, *FBData) (*Error, error)
	mustEmbedUnimplementedWasabeeFederationServer()
}

// UnimplementedWasabeeFederationServer must be embedded to have forward compatible implementations.
type UnimplementedWasabeeFederationServer struct {
}

func (UnimplementedWasabeeFederationServer) SetCommunityID(context.Context, *CommunityID) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCommunityID not implemented")
}
func (UnimplementedWasabeeFederationServer) SetAgentLocation(context.Context, *AgentLocation) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAgentLocation not implemented")
}
func (UnimplementedWasabeeFederationServer) SetIntelData(context.Context, *IntelData) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetIntelData not implemented")
}
func (UnimplementedWasabeeFederationServer) AddFirebaseToken(context.Context, *FBData) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFirebaseToken not implemented")
}
func (UnimplementedWasabeeFederationServer) mustEmbedUnimplementedWasabeeFederationServer() {}

// UnsafeWasabeeFederationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WasabeeFederationServer will
// result in compilation errors.
type UnsafeWasabeeFederationServer interface {
	mustEmbedUnimplementedWasabeeFederationServer()
}

func RegisterWasabeeFederationServer(s grpc.ServiceRegistrar, srv WasabeeFederationServer) {
	s.RegisterService(&WasabeeFederation_ServiceDesc, srv)
}

func _WasabeeFederation_SetCommunityID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommunityID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WasabeeFederationServer).SetCommunityID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wasabee.WasabeeFederation/SetCommunityID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WasabeeFederationServer).SetCommunityID(ctx, req.(*CommunityID))
	}
	return interceptor(ctx, in, info, handler)
}

func _WasabeeFederation_SetAgentLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentLocation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WasabeeFederationServer).SetAgentLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wasabee.WasabeeFederation/SetAgentLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WasabeeFederationServer).SetAgentLocation(ctx, req.(*AgentLocation))
	}
	return interceptor(ctx, in, info, handler)
}

func _WasabeeFederation_SetIntelData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntelData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WasabeeFederationServer).SetIntelData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wasabee.WasabeeFederation/SetIntelData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WasabeeFederationServer).SetIntelData(ctx, req.(*IntelData))
	}
	return interceptor(ctx, in, info, handler)
}

func _WasabeeFederation_AddFirebaseToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FBData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WasabeeFederationServer).AddFirebaseToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wasabee.WasabeeFederation/AddFirebaseToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WasabeeFederationServer).AddFirebaseToken(ctx, req.(*FBData))
	}
	return interceptor(ctx, in, info, handler)
}

// WasabeeFederation_ServiceDesc is the grpc.ServiceDesc for WasabeeFederation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WasabeeFederation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wasabee.WasabeeFederation",
	HandlerType: (*WasabeeFederationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetCommunityID",
			Handler:    _WasabeeFederation_SetCommunityID_Handler,
		},
		{
			MethodName: "SetAgentLocation",
			Handler:    _WasabeeFederation_SetAgentLocation_Handler,
		},
		{
			MethodName: "SetIntelData",
			Handler:    _WasabeeFederation_SetIntelData_Handler,
		},
		{
			MethodName: "AddFirebaseToken",
			Handler:    _WasabeeFederation_AddFirebaseToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/wasabee.proto",
}
